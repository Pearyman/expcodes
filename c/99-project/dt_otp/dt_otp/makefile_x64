# == makefile for : dt_otp_x64.so ==

# -------------------------------------------------------------------------------
# Variable declaration :                                 
# -------------------------------------------------------------------------------
  TAR_LIB_NAME := dt_otp_x64.so
  
  O_MAIN_OBJS := dllmain.o dt_otp.o otp_impl.o
  O_ALGORITHM_OBJS := md5.o digital_watermark.o
  O_UTIL_OBJS := crypto_utils.o jni_utils.o str_utils.o num_utils.o time_utils.o
  O_ALL_OBJS := $(O_MAIN_OBJS) $(O_ALGORITHM_OBJS) $(O_UTIL_OBJS)

  COMPILE_CMD := g++ -m64 -fPIC 

# -------------------------------------------------------------------------------
# Build libary :                                 
# -------------------------------------------------------------------------------

all : $(TAR_LIB_NAME)

$(TAR_LIB_NAME) : $(O_ALL_OBJS) 
	@$(COMPILE_CMD) -shared -o $(TAR_LIB_NAME) $(O_ALL_OBJS) 
	@echo "> Build [$(TAR_LIB_NAME)] finish." 

dllmain.o : dllmain.cpp stdafx.h targetver.h
	@$(COMPILE_CMD) -c dllmain.cpp -o dllmain.o 
	@echo "> Compile [dllmain.o] finish." 
	 
dt_otp.o : dt_otp.cpp dt_otp.h otp_impl.h jni_utils.h exp_token_otp__OTP_CAPI.h jni.h jni_md.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c dt_otp.cpp -o dt_otp.o 
	@echo "> Compile [dt_otp.o] finish." 
	
otp_impl.o : otp_impl.cpp otp_impl.h num_utils.h str_utils.h time_utils.h crypto_utils.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c otp_impl.cpp -o otp_impl.o 
	@echo "> Compile [otp_impl.o] finish." 

md5.o : md5.cpp md5.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c md5.cpp -o md5.o 
	@echo "> Compile [md5.o] finish." 
	
digital_watermark.o : digital_watermark.cpp digital_watermark.h str_utils.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c digital_watermark.cpp -o digital_watermark.o 
	@echo "> Compile [digital_watermark.o] finish." 
	
crypto_utils.o : crypto_utils.cpp crypto_utils.h str_utils.h md5.h digital_watermark.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c crypto_utils.cpp -o crypto_utils.o 
	@echo "> Compile [crypto_utils.o] finish." 

jni_utils.o : jni_utils.cpp jni_utils.h str_utils.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c jni_utils.cpp -o jni_utils.o 
	@echo "> Compile [jni_utils.o] finish." 

num_utils.o : num_utils.cpp num_utils.h str_utils.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c num_utils.cpp -o num_utils.o 
	@echo "> Compile [num_utils.o] finish." 

str_utils.o : str_utils.cpp str_utils.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c str_utils.cpp -o str_utils.o 
	@echo "> Compile [str_utils.o] finish." 

time_utils.o : time_utils.cpp time_utils.h stdafx.h targetver.h
	@$(COMPILE_CMD) -c time_utils.cpp -o time_utils.o 
	@echo "> Compile [time_utils.o] finish." 
	
clean:
	@rm -f $(O_ALL_OBJS)
	@echo "> Clean [*.o] finish." 

