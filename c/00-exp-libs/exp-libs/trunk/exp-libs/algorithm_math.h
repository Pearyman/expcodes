/*****************************************
  Description: 算法工具包-数学
  Authod     : EXP
  Modify By  : None
  Date       : 2017-12-01
******************************************/

#pragma once;

#ifndef __ALGORITHM_MATH_H_
#define __ALGORITHM_MATH_H_

	#include "stdafx.h"

	/**
	 * 通过埃拉托斯特尼筛法找出指定范围内的所有素数.
	 * 
	 * 关于素数的求解方法，不外乎用到：
	 * 	[定义]：只能被1或者自身整除的自然数（不包括1），称为素数
	 * 	[定理]：如果一个数k是合数，那么它的最小质因数肯定<=sqrt(k) 
	 * 		由于一个自然数若不是合数则必是素数，这个定理可以反过来用于素数：
	 * 			如果一个数k是素数, 那么k必不能被<=sqrt(k)的所有整数整除
	 * 	[算法]：埃拉托斯特尼筛法，也简称筛法，是一种空间换时间算法.
	 * 		筛法主要用于求出某一个范围内的所有素数，而不用于判断某个数是否为素数.
	 * 		其主要思想是利用了合数定理, 剔除范围内所有合数，剩下的必是素数.
	 * 		例如要求 (1, n] 以内的所有素数：
	 * 			那么把2的所有倍数删掉（不包括2）；
	 * 			 在剩下的数中第一个是3，把3的所有倍数删掉（不包括3）；
	 * 			在剩下的数中第一个是7，把7的所有倍数删掉（不包括7）
	 * 			......
	 * 			 一直重复直到遍历完 (1, sqrt(n)] 范围内的所有数，那么剩下的就是这个范围内的素数
	 * 		
	 * 	常规情况下，
	 * 		使用定义+定理求解素数，时间复杂度约为O(n*sqrt(n))，超过千万级的话短时间内跑不动
	 * 		使用筛法求解素数，时间复杂度可达到O(n)，但空间复杂度也达到了O(n)
	 */
	class Prime {
		public:
			DLL_API Prime(int range);	// 构造函数（构造 [2, range] 范围内的素数集）
			DLL_API ~Prime();			// 析构函数

			DLL_API int getCount(void);		// 获取范围内的素数个数
			DLL_API bool isPrime(int num);	// 检测范围内的指定整数是否为素数
			DLL_API int* getPrimes(void);	// 获取范围内的素数集

		private:
			int range;
			int count;
			bool* isPrimes;			// 素数标记集
			int* primes;			// 素数集

			int screen(void);		// 使用埃拉托斯特尼筛法求解素数集
			void toPrimes(void);	// 把素数标记集转换成素数集
	};

#endif
